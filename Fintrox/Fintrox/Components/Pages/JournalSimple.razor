@page "/journal/simple"
@using Fintrox.Infrastructure
@using Fintrox.Domain.Accounting
@using Fintrox.Domain.Partners
@using Fintrox.Application.Accounting
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore

@inject IAccountingService Acc
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager Nav

<PageTitle>Simple Journal</PageTitle>

<h3>Post Simple Journal Entry</h3>

@if (loading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@vm" OnValidSubmit="@PostAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Date</label>
                <InputDate @bind-Value="vm.Date" class="form-control" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Number</label>
                <InputText @bind-Value="vm.Number" class="form-control" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Description</label>
                <InputText @bind-Value="vm.Description" class="form-control" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Debit account</label>
                <InputSelect @bind-Value="vm.DebitAccountId" class="form-select">
                    <option value="">-- select --</option>
                    @foreach (var a in accounts)
                    {
                        <option value="@a.Id">@a.Code - @a.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-4">
                <label class="form-label">Credit account</label>
                <InputSelect @bind-Value="vm.CreditAccountId" class="form-select">
                    <option value="">-- select --</option>
                    @foreach (var a in accounts)
                    {
                        <option value="@a.Id">@a.Code - @a.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-4">
                <label class="form-label">Amount</label>
                <InputNumber @bind-Value="vm.Amount" class="form-control" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Counterparty (optional)</label>
                <InputSelect @bind-Value="vm.CounterpartyId" class="form-select">
                    <option value="">-- none --</option>
                    @foreach (var c in counterparties)
                    {
                        <option value="@c.Id">@c.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-12 d-flex gap-2">
                <button class="btn btn-primary" type="submit" disabled="@busy">Post</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="Reset">Reset</button>
                <button class="btn btn-link" type="button" @onclick="@(() => Nav.NavigateTo("/reports/trial-balance"))">
                    Go to Trial Balance →
                </button>
            </div>
        </div>
    </EditForm>

    @if (!string.IsNullOrWhiteSpace(message))
    {
        <div class="alert alert-info mt-3">@message</div>
    }
}

@code {
    private bool loading = true;
    private bool busy = false;
    private string? message;

    private List<Account> accounts = new();
    private List<Counterparty> counterparties = new();

    private Vm vm = new();

    protected override async Task OnInitializedAsync()
    {
        vm = new Vm
        {
            Date = DateTime.Today,
            Number = $"J-{DateTime.Now:yyyyMMdd-HHmm}"
        };

        using var db = await DbFactory.CreateDbContextAsync();
        accounts = await db.Accounts.OrderBy(a => a.Code).ToListAsync();
        counterparties = await db.Counterparties.OrderBy(c => c.Name).ToListAsync();

        loading = false;
    }

    private async Task PostAsync()
    {
        busy = true;
        try
        {
            var entry = await Acc.PostSimpleAsync(
                vm.Date, vm.Number!, vm.Description ?? string.Empty,
                vm.DebitAccountId!.Value, vm.CreditAccountId!.Value,
                vm.Amount, vm.CounterpartyId);

            message = $"Posted entry {vm.Number} (ID: {entry.Id}).";
            Reset();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
        finally { busy = false; }
    }

    private void Reset()
    {
        vm.Description = string.Empty;
        vm.Amount = 0;
        vm.CounterpartyId = null;
    }

    public class Vm
    {
        [Required] public DateTime Date { get; set; }
        [Required] public string? Number { get; set; }
        public string? Description { get; set; }
        [Required] public Guid? DebitAccountId { get; set; }
        [Required] public Guid? CreditAccountId { get; set; }
        [Range(0.01, double.MaxValue)] public decimal Amount { get; set; }
        public Guid? CounterpartyId { get; set; }
    }
}
